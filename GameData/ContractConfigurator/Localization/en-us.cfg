Localization
{
    en-us
    {
        //////////////////////////////////////////////////////////////////////
        // Generic
        //////////////////////////////////////////////////////////////////////

        // Lists
        #cc.list.and.2 = <<1>> and <<2>>
        #cc.list.and.start = <<1>>, <<2>>
        #cc.list.and.middle = <<1>>, <<2>>
        #cc.list.and.end = <<1>>, and <<2>>
        #cc.list.or.2 = <<1>> or <<2>>
        #cc.list.or.start = <<1>>, <<2>>
        #cc.list.or.middle = <<1>>, <<2>>
        #cc.list.or.end = <<1>>, or <<2>>

        // Science
        #cc.science.sit.InSpaceHigh = High in space
        #cc.science.sit.InSpaceLow = Low in space
        #cc.science.location.Surface = on the surface
        #cc.science.location.Space = in space
        #cc.science.experiment.many = Various experiments
        #cc.science.experiment.any = Any
        #cc.science.biomeKSC = KSC
        #cc.science.biomeIdentifier = <<C:1>>\u2019s <<2>>
        #cc.science.deployedScienceReport = Deployed science report

        // Part stuff
        #cc.parts.battery = Battery
        #cc.parts.dock = Docking port
		#cc.parts.grapple = Grappling device

        // Expansions
		#cc.expansion.MakingHistory = Making History
        #cc.expansion.Serenity = Breaking Ground

        // Other stuff
        #cc.rateOfClimb = Rate of climb
        #cc.altitude = Altitude
        #cc.apoapsis = Apoapsis
        #cc.periapsis = Periapsis
        #cc.eccentricity = Eccentricity
        #cc.inclination =  Inclination
        #cc.acceleration = Acceleration
        #cc.deltav.actual = Delta-v (actual)
        #cc.deltav.vacuum = Delta-v (vacuum)
        #cc.loadingtip = Configuring Contracts...
        #cc.experienceType = Special experience
		#cc.anyBody = Any body

        // Passenger loading
        #cc.loadPassengers.1 = One or more contracts require passengers to be loaded.  Would you like to load them onto this vessel?
        #cc.loadPassengers.2 = Passengers to load:
        #cc.loadPassengers.3 = Empty seats on vessel: <<1>>
        #cc.loadPassengers.passengerCount = <<N:1>> <<1[passenger/passengers]>>: <<2>>
        #cc.loadPassengers.button = Load passengers
        #cc.loadPassengers.button.no = No passengers


        //////////////////////////////////////////////////////////////////////
        // Settings
        //////////////////////////////////////////////////////////////////////
        #cc.settings.Section = Contract Configurator
        #cc.settings.contractMultiplier.name = Active Contract Multiplier
        #cc.settings.contractMultiplier.desc = Multiplier applied to the active contract limits.
        #cc.settings.contractGroups = Contract Groups
        #cc.settings.stockContracts = Stock Contracts 


        //////////////////////////////////////////////////////////////////////
        // Agencies
        //////////////////////////////////////////////////////////////////////
        #cc.agency.AsteroidRecovery.name = Asteroid Recovery
        #cc.agency.CometSample.name = Comet Sample
        #cc.agency.AsteroidRecovery.desc = We buy asteroids!  With asteroid prices so high, now is an excellent time to sell your unused scrap asteroids.

        #cc.agency.BaseConstruction.name = Base Construction
        #cc.agency.BaseConstruction.desc = Creating bases elsewhere in the solar system may be our solution to overpopulation.

        #cc.agency.CollectScience.name = Collect Science
        #cc.agency.DeployedScience.name = Deployed Science
        #cc.agency.CollectScience.desc = Wernher has a checklist, and it's up to you to fill it.  With SCIENCE.

        #cc.agency.ContractConfigurator.name = Contract Configurator
        #cc.agency.ContractConfigurator.desc = This is the default agency for Contract Configurator contracts.  If you're seeing this, it's because the author of the contract didn't specify an agency!

        #cc.agency.Exploration.name = Exploration
        #cc.agency.Exploration.desc = What drives a Kerbal to push their limits and explore new boundaries?  These contracts.

        #cc.agency.FlagPlanting.name = Flag Planting
        #cc.agency.FlagPlanting.desc = The celestial bodies of our solar system are lacking in flags.  We NEED more flags!

        #cc.agency.GrandTours.name = Grand Tours
        #cc.agency.GrandTours.desc = Join the space program, see the solar system!

        #cc.agency.ISRU.name = ISRU
        #cc.agency.ISRU.desc = We've got client who would like you to get some ore and move it to another celestial body.  Think you're up for it?

        #cc.agency.PartTesting.name = Part Testing
        #cc.agency.PartTesting.desc = So here's the deal: we have a bunch of parts, and we'd like to make spaceships out of them.  But we're really not all that sure if they are space-worthy.  So if you could bring them up into space and test them out, that'd be greaaaaaat.

        #cc.agency.RescueAndRecovery.name = Rescue and Recovery
        #cc.agency.RescueAndRecovery.desc = Sometimes Kerbals go to space and forget to come back.  These are their stories.

        #cc.agency.Robotics.name = Robotics
        #cc.agency.RoboticArm.name = Robotic Arm Contracts
        #cc.agency.RoboticScienceRetrieval.name = Robotic Science Retrieval
        #cc.agency.Robotics.desc = Use robotics technology to advance our scientific knowledge.

        #cc.agency.Satellites.name = Satellites
        #cc.agency.Satellites.desc = Everything satellites!  We need more satellites - orbiting every celestial body.  Already have a satellite?  We need it in a different orbit!

        #cc.agency.Sentinel.name = Sentinel
        #cc.agency.Sentinel.Asteroid.name = Sentinel (Asteroid Detection)
        #cc.agency.Sentinel.Comet.name = Sentinel (Comet Detection)
        #cc.agency.Sentinel.desc = Our SENTINEL Infrared Telescopes will help us identify life-threatening asteroids.  Keep your eyes open!

        #cc.agency.Stations.name = Stations
        #cc.agency.Stations.desc = Build orbital stations for great prestige!

        #cc.agency.Surveys.name = Surveys
        #cc.agency.Surveys.desc = We would like you to go places.  Specific places.

        #cc.agency.Tourism.name = Tourism
        #cc.agency.Tourism.desc = Our clients have their tropical shirts ready, hopefully you'll be able to drop them off somewhere sunny when they've finished their itinerary.

        // DMOS Agencies
        #cc.agency.Anomalies.name = Anomalies
        #cc.agency.AsteroidSurve.namey = Asteroid Survey
        #cc.agency.MagneticSurvey.name = Magnetic Survey
        #cc.agency.ReconnaisanceSurvey.name = Reconnaisance Survey
        #cc.agency.OrbitalSurvey.name = Orbital Survey


        //////////////////////////////////////////////////////////////////////
        // Mission Control UI
        //////////////////////////////////////////////////////////////////////
        #cc.mcui.title.trivial = Trivial Contracts:
        #cc.mcui.title.significant = Significant Contracts:
        #cc.mcui.title.exceptional = Exceptional Contracts:
        #cc.mcui.title.allActive = All Active Contracts:
        #cc.mcui.all = All
        #cc.mcui.max = Max
        #cc.mcui.agent = Agent:
        #cc.mcui.contract = Contract:
        #cc.mcui.briefing = Briefing:
        #cc.mcui.preRequisites = Pre-Requisites:
        #cc.mcui.offered = Offered:

        #cc.mcui.req.advance = Must have <<1>> funds for advance
        #cc.mcui.req.oneoff = Must not have been completed before
        #cc.mcui.req.maxCompletions = May only be completed <<1>> times
        #cc.mcui.req.maxCompletions_reason = has previously been completed <<1>> times
        #cc.mcui.req.maxSimultaneous = May only have <<1>> offered/active <<2>> contracts at a time
        #cc.mcui.req.keyValue = Key <<1>> must have a value
        #cc.mcui.req.researchBody = Must have researched <<1>>
        #cc.mcui.status.met = Met
        #cc.mcui.status.unmet = Unmet
        #cc.mcui.req.failOnAcceptPrompt = The <<1>> contract is incompatible with\n<<2>>\n\nIf you accept this contract, all incompatible ones will fail. Are you sure?
        #cc.mcui.unknownParam = Unknown parameter


        //////////////////////////////////////////////////////////////////////
        // Parameters
        //////////////////////////////////////////////////////////////////////

        // Generic strings
        #cc.param.count = Count:
        #cc.param.count.none = None
        #cc.param.count.no = No
        #cc.param.count.atLeast = At least <<n:1>>
        #cc.param.count.atLeast.num = At least <<1>>
        #cc.param.count.atMost = At most <<n:1>>
        #cc.param.count.atMost.num = At most <<1>>
        #cc.param.count.exact = <<N:1>>
        #cc.param.count.exact.num = <<1>>
        #cc.param.count.between = Between <<n:1>> and <<n:2>>
        #cc.param.count.between.num = Between <<1>> and <<2>>
        #cc.param.optionalTag = (Optional)
        #cc.param.vessel.any = any vessel
        #cc.param.vessel.Any = Any vessel

        // Parameter specific strings
        #cc.param.All = Complete ALL of the following
        #cc.param.Any = Complete any ONE of the following
        #cc.param.AtLeast = Complete at least <<n:1>> of the following
        #cc.param.AtMost = Allow no more than <<n:1>> of the following
        #cc.param.Duration.preWait = Waiting time required:
        #cc.param.Duration.waiting = Time to completion:
        #cc.param.Duration.completion = Wait time over
        // count, trait, experience
        #cc.param.HasAstronaut.1 = Astronauts: <<1>>
        #cc.param.HasAstronaut.2 = Astronauts: <<1>> with <<2>>
        #cc.param.HasAstronaut.3 = Astronauts: <<1>> with <<2>> and <<3>>
        #cc.param.HasAstronaut.trait = the <<1>> trait
        #cc.param.HasAstronaut.experience.atLeast = an experience level of at least <<1>>
        #cc.param.HasAstronaut.experience.atMost = an experience level of at most <<1>>
        #cc.param.HasAstronaut.experience.exact = an experience level of <<1>>
        #cc.param.HasAstronaut.experience.between = an experience level between <<1>> and <<2>>
        #cc.param.KerbalDeaths.generic = Kill <<n:1[no Kerbals/no more than one Kerbal/no more than $d Kerbals]>>
        #cc.param.KerbalDeaths.vessel = Kill <<n:1[no Kerbals/no more than one Kerbal/no more than $d Kerbals]>> on vessel <<2>>
        #cc.param.KerbalDeaths.specific = Do not kill
        #cc.param.MissionTimer = Mission Timer:
        #cc.param.None = Prevent ALL of the following
        #cc.param.Not = Is not true
        #cc.param.ParameterDelegate.MatchExtension.validate = With
        #cc.param.ParameterDelegate.MatchExtension.all = All have
        #cc.param.ParameterDelegate.MatchExtension.none = None have
        #cc.param.PerformOrbitalSurvey = Perform an orbital resource survey of <<1>>
        #cc.param.ReachSpace = Reach space
        #cc.param.RecoverKerbal.one = Recover <<1>>
        #cc.param.RecoverKerbal.many = Recover Kerbals
        #cc.param.Sequence = Complete the following in order
        #cc.param.TargetDestroyed = <<N:1[$d target/$d targets]>> destroyed
        #cc.param.TargetDestroyed.target = Target: <<1>>
        #cc.param.Timer.expired = Time expired!
        #cc.param.Timer.active = Time remaining: <<1>>
        #cc.param.Timer.inactive = Time limit: <<1>>
        #cc.param.VesselParameterGroup.default = Vessel: <<1>>
        #cc.param.VesselParameterGroup.trackedVessel = Tracked vessel: <<1>>
        #cc.param.VesselParameterGroup.newVessel = Vessel: <<1>> (new)
        #cc.param.VesselParameterGroup.anyVessel = Vessel: Any
        #cc.param.VesselParameterGroup.anyVesselList = Vessel: Any of the following: <<1>>
        #cc.param.VesselParameterGroup.anyVesselListEmpty = Vessel: Any of the following
        #cc.param.VesselParameterGroup.complete = Vessel: <<1>>: <<2>>
        #cc.param.VesselParameterGroup.notes.noVessel = No vessel currently matching parameters.
        #cc.param.VesselParameterGroup.notes.activeVessel = Active vessel.
        #cc.param.VesselParameterGroup.notes.waitingVessel = Waiting for completion time for <<1>>.
        #cc.param.VesselParameterGroup.time = Time Remaining: <<1>>
        #cc.param.VesselParameterGroup.duration = Duration: <<1>>
        #cc.param.CollectScience.rm.None = None
        #cc.param.CollectScience.rm.Recover = Recover
        #cc.param.CollectScience.rm.Transmit = Transmit
        #cc.param.CollectScience.rm.RecoverOrTransmit = Recover or transmit
        #cc.param.CollectScience.0 = Collect science
        // Experiments, biome/CB, situation
        #cc.param.CollectScience.1 = Collect science: <<1>>
        #cc.param.CollectScience.2 = Collect science: <<1>> from <<2>>
        #cc.param.CollectScience.3 = Collect science: <<1>> from <<2>> while <<3>>
        #cc.param.CollectScience.destination = Destination: <<C:1>>
        #cc.param.CollectScience.location = Location: <<C:1>>
        #cc.param.CollectScience.biome = Biome: <<C:1>>
        #cc.param.CollectScience.situation = Situation: <<C:1>>
        #cc.param.CollectScience.experiment = Experiment: <<1>>
        #cc.param.CollectScience.recovery = Recovery: <<1>>
        #cc.param.Docking.1 = Docked with: <<1>>
        #cc.param.Docking.2 = Docked: <<1>> and <<2>>
        #cc.param.HasAntenna.transmit = Transmit antenna rating (combined): <<1>>
        #cc.param.HasAntenna.relay = Relay antenna rating (combined): <<1>>
        #cc.param.HasCrew.unmanned = Unmanned
        // count, trait, experience
        #cc.param.HasCrew = Crew
        #cc.param.HasCrew.1 = Crew: <<1>>
        #cc.param.HasCrew.2 = Crew: <<1>> with <<2>>
        #cc.param.HasCrew.3 = Crew: <<1>> with <<2>> and <<3>>
        #cc.param.HasCrew.trait = Trait: <<1>>
        #cc.param.HasCrew.experience = Experience level: <<1>>
        #cc.param.HasCrew.specific = <<1>>: On board
        #cc.param.HasCrewCapacity.none = None
        #cc.param.HasCrewCapacity = Crew capacity: <<1>>
        #cc.param.HasPassenger = Passengers
        #cc.param.HasPassenger.initial = Load <<n:1[all passengers/$d passenger/$d passengers]>> while on the launchpad/runway
        #cc.param.HasPassenger.summary = Passengers: <<1>>
        #cc.param.HasPassenger.detail = On board: <<1>>
        #cc.param.HasResource = Resources
        #cc.param.HasResource.capacity = Resource capacity: <<1>>: <<2>>
        #cc.param.HasResource.resource = Resource: <<1>>: <<2>>
        #cc.param.HasResource.notzero = Not zero units
        #cc.param.HasResource.measure = <<1>> units
        #cc.param.IsNotVessel = Vessel: Not <<1>>
        #cc.param.NewVessel = Launch a new vessel
        #cc.param.NoStaging = Vessel not staged
        #cc.param.Orbit = Orbit
        #cc.param.Orbit.detail = Orbit: <<1>>
        #cc.param.Orbit.below.meters = <<C:1>>: Below <<2>> m
        #cc.param.Orbit.above.meters = <<C:1>>: Above <<2>> m
        #cc.param.Orbit.between.meters = <<C:1>>: Between <<2>> m and <<3>> m
        #cc.param.Orbit.below.nounits = <<C:1>>: Below <<2>>
        #cc.param.Orbit.above.nounits = <<C:1>>: Above <<2>>
        #cc.param.Orbit.between.nounits = <<C:1>>: Between <<2>> and <<3>>
        #cc.param.Orbit.below.degrees = <<C:1>>: Below <<2>>\u00B0
        #cc.param.Orbit.above.degrees = <<C:1>>: Above <<2>>\u00B0
        #cc.param.Orbit.between.degrees = <<C:1>>: Between <<2>>\u00B0 and <<3>>\u00B0
        #cc.param.Orbit.specified = Reach the specified orbit
        #cc.param.PartValidation = Parts
        #cc.param.PartValidation.nocount = Parts: <<1>>
        #cc.param.PartValidation.atLeast = Parts: At least <<n:1>> <<2>>
        #cc.param.PartValidation.atMost = Parts: At most <<n:1>> <<2>>
        #cc.param.PartValidation.withModule = with module: <<1>>
        #cc.param.PartValidation.withModuleType = with module type: <<1>>
        // <<With/All have/None have>> <<2>>: <<3>>
        #cc.param.PartValidation.generic = <<1>> <<c:2>>: <<3>>
        #cc.param.PartValidation.generic.moduleRoot = <<1>> <<2>>
        #cc.param.PartValidation.generic.moduleSub = <<1>>: <<2>>
        #cc.param.PartValidation.type = <<1>> type: <<2>>
        #cc.param.PartValidation.module = <<1>> module: <<2>>
        #cc.param.PartValidation.moduleType = <<1>> module type: <<2>>
        #cc.param.PartValidation.moduleShort = <<1>> module
        #cc.param.PartValidation.category = <<1>> category: <<2>>
        #cc.param.PartValidation.manufacturer = <<1>> manufacturer: <<2>>
        #cc.param.ReachState = Vessel state
        #cc.param.ReachState.detail = Vessel state: <<1>>
        #cc.param.ReachState.altitudeTerrain = Altitude (terrain)
        #cc.param.ReachState.mode.srf = Surface speed
        #cc.param.ReachState.mode.obt = Orbital speed
        #cc.param.ReachState.below.speed = <<C:1>>: Less than <<2>> m/s
        #cc.param.ReachState.above.speed = <<C:1>>: Greater than <<2>> m/s
        #cc.param.ReachState.between.speed = <<C:1>>: Between <<2>> ms and <<3>> m/s
        #cc.param.ReachState.below.acceleration = <<C:1>>: Less than <<2[$d gee/$d gees]>>
        #cc.param.ReachState.above.acceleration = <<C:1>>: Greater than <<2[$d gee/$d gees]>>
        #cc.param.ReachState.between.acceleration = <<C:1>>: Between <<2>> and <<3>> gees
        #cc.param.Rendezvous.1 = Rendezvous with: <<1>>
        #cc.param.Rendezvous.2 = Rendezvous: <<1>> and <<2>>
        #cc.param.ResourceConsumption.consumption = Resource consumption: <<1>>: <<2>>
        #cc.param.ResourceConsumption.production = Resource production: <<1>>: <<2>>
        #cc.param.ResourceConsumption.atLeast = At least <<1>> units/s
        #cc.param.ResourceConsumption.atMost = At most <<1>> units/s
        #cc.param.ResourceConsumption.between = Between <<1>> and <<2>> units/s
        #cc.param.ReturnHome = Land or splashdown on <<1>>
        #cc.param.VesselDestroyed = Vessel destroyed
        #cc.param.VesselHasVisited.BoardVessel = Board a vessel on <<1>>
        #cc.param.VesselHasVisited.Die = Die on <<1>>
        #cc.param.VesselHasVisited.Escape = Perform an escape from <<1>>
        #cc.param.VesselHasVisited.ExitVessel = Exit a vessel on <<1>>
        #cc.param.VesselHasVisited.Flight = Perform a flight on <<1>>
        #cc.param.VesselHasVisited.Flyby = Perform a flyby of <<1>>
        #cc.param.VesselHasVisited.Land = Perform a landing on <<1>>
        #cc.param.VesselHasVisited.Launch = Perform a launch from <<1>>
        #cc.param.VesselHasVisited.Orbit = Perform an orbit of <<1>>
        #cc.param.VesselHasVisited.PlantFlag = Plant a flag on <<1>>
        #cc.param.VesselHasVisited.Recover = Perform a recovery on <<1>>
        #cc.param.VesselHasVisited.Spawn = Spawn on <<1>>
        #cc.param.VesselHasVisited.Suborbit = Perform a sub-orbital trajectory on <<1>>
        #cc.param.VesselIsType = Vessel type: <<1>>
        #cc.param.VesselMass = Mass: <<1>>
        #cc.param.VesselMass.atLeast = At least <<1>> tons
        #cc.param.VesselMass.atMost = At most <<1>> tons
        #cc.param.VesselMass.between = Between <<1>> and <<2>> tons
        #cc.param.VesselNotDestroyed = Not destroyed: <<1>>
        #cc.param.VesselNotDestroyed.any = No vessels destroyed
        #cc.param.VisitWaypoint = Location: <<1>> meters above <<2>>


        //////////////////////////////////////////////////////////////////////
        // Requirements
        //////////////////////////////////////////////////////////////////////
        #cc.req.AcceptContract = Must have accepted contract <<1>>
        #cc.req.AcceptContract.x = Must not have accepted contract <<1>>
        #cc.req.All = Must meet <color=#<<1>>>all</color> of the following
        #cc.req.All.x = Must not meet <color=#<<1>>>any</color> of the following
        #cc.req.AltitudeRecord = Must have reached an altitude of at least <<1>> m
        #cc.req.AltitudeRecord.x = Must have not yet reached an altitude of <<1>> m
        #cc.req.AltitudeRecord.additional = <<1>> (current record: <<2>> m)
        #cc.req.Any = Must meet <color=#<<1>>>any</color> of the following
        #cc.req.Any = Must not meet <color=#<<1>>>all</color> of the following
        #cc.req.AtLeast = Must meet at least <color=#<<1>>><<n:2>></color> of the following
        #cc.req.AtMost = Must meet at most <color=#<<1>>><<n:2>></color> of the following
        #cc.req.CanResearchTech = Must be able to research <<1>>
        #cc.req.CanResearchTech.x = Must not be able to research <<1>>
        #cc.req.CompleteContract = Must have completed contract <<1>>
        #cc.req.CompleteContract.x = Must not have completed contract <<1>>
        #cc.req.CompleteContract.cooldown = Must have completed contract <<1>> within the last <<2>>
        #cc.req.CompleteContract.cooldown.x = Must not have completed contract <<1>> within the last <<2>>
        #cc.req.Expansion = Must have the <<1>> expansion installed
        #cc.req.Facility.exact = The <<1>> must be level <<n:2>>
        #cc.req.Facility.atLeast = The <<1>> must be at least at level <<n:2>>
        #cc.req.Facility.atMost = The <<1>> must be at most at level <<n:2>>
        #cc.req.FirstCrewToSurvive = Must have recovered a crew from space
        #cc.req.FirstCrewToSurvive.x = Must not have recovered a crew from space
        #cc.req.FirstLaunch = Must have performed the first launch
        #cc.req.FirstLaunch.x = Must not have performed the first launch
        #cc.req.Funds.between = Must have between <<1>> and <<2>> funds
        #cc.req.Funds.atLeast = Must have at least <<1>> funds
        #cc.req.Funds.atMost = Must have at most <<1>> funds
        #cc.req.HasAstronaut.1 = Must have <<c:1>> astronauts
        #cc.req.HasAstronaut.2 = Must have <<c:1>> astronauts with <<2>>
        #cc.req.HasAstronaut.3 = Must have <<c:1>> astronauts with <<2>> and <<3>>
        #cc.req.HasAstronaut.1.x = Must not have <<c:1>> astronauts
        #cc.req.HasAstronaut.2.x = Must not have <<c:1>> astronauts with <<2>>
        #cc.req.HasAstronaut.3.x = Must not have <<c:1>> astronauts with <<2>> and <<3>>
        #cc.req.KSCLanding = Must have landed at KSC
        #cc.req.KSCLanding.x = Must not have landed at KSC
        #cc.req.PartModuleTypeUnlocked = Must have <<2[a part/parts]>> unlocked of type <<1>>
        #cc.req.PartModuleTypeUnlocked.x = Must not have <<2[a part/parts]>> unlocked of type <<1>>
        #cc.req.PartModuleUnlocked = Must have <<2[a part/parts]>> unlocked with <<1>>
        #cc.req.PartModuleUnlocked.x = Must not have <<2[a part/parts]>> unlocked with <<1>>
        #cc.req.PartUnlocked = Must have unlocked <<2[part/parts]>> <<1>>
        #cc.req.PartUnlocked.x = Must not have unlocked <<2[part/parts]>> <<1>>
        #cc.req.PerformOrbitalSurvey = Must have performed an orbital survey of <<1>>
        #cc.req.PerformOrbitalSurvey.x = Must not have performed an orbital survey of <<1>>
        #cc.req.ReachSpace = Must have reached space
        #cc.req.ReachSpace.x = Must not have reached space
        #cc.req.Reputation.between = Must have between <<1>> and <<2>> reputation
        #cc.req.Reputation.atLeast = Must have at least <<1>> reputation
        #cc.req.Reputation.atMost = Must have at most <<1>> reputation
        #cc.req.RunwayLanding = Must have landed on the runway
        #cc.req.RunwayLanding.x = Must not have landed on the runway
        #cc.req.Science.between = Must have between <<1>> and <<2>> science
        #cc.req.Science.atLeast = Must have at least <<1>> science
        #cc.req.Science.atMost = Must have at most <<1>> science
        #cc.req.Spacewalk = Must have performed a spacewalk
        #cc.req.Spacewalk.x = Must not have performed a spacewalk
        #cc.req.TechResearched.tech = Must have researched <<1>>
        #cc.req.TechResearched.tech.x = Must not have researched <<1>>
        #cc.req.TechResearched.part = Must have researched tech for <<1>>
        #cc.req.TechResearched.part.x = Must not have researched tech for <<1>>
        #cc.req.ValidVessel = The vessel <<1>> must be a valid vessel
        #cc.req.ValidVessel.x = The vessel <<1>> must not be a valid vessel
        #cc.req.ProgressCelestialBody.genericBody = the target body
        #cc.req.BaseConstruction = Must have built <<1[a/an uncrewed/a crewed]>> base on <<2>>
        #cc.req.BaseConstruction.x = Must not have built a <<1[a/an uncrewed/a crewed]>> base on <<2>>
        #cc.req.Docking = Must have <<1[docked/performed an uncrewed docking/performed a crewed docking]>> near <<2>>
        #cc.req.Docking.x = Must not have <<1[docked/performed an uncrewed docking/performed a crewed docking]>> near <<2>>
        #cc.req.Escape = Must have <<1[escaped/performed an uncrewed escape/performed a crewed escape]>> from <<2>>
        #cc.req.Escape.x = Must not have <<1[escaped/performed an uncrewed escape/performed a crewed escape]>> from <<2>>
        #cc.req.FlyBy = Must have <<1[flown by/performed an uncrewed fly-by of/performed a crewed fly-by of]>> <<2>>
        #cc.req.FlyBy.x = Must not have <<1[flown by/performed an uncrewed fly-by of/performed a crewed fly-by of]>> <<2>>
        #cc.req.Landing = Must have <<1[landed/performed an uncrewed landing/performed a crewed landing]>> on <<2>>
        #cc.req.Landing.x = Must not have <<1[landed/performed an uncrewed landing/performed a crewed landing]>> on <<2>>
        #cc.req.Orbit = Must have <<1[orbited/performed an uncrewed orbit of/performed a crewed orbit of]>> <<2>>
        #cc.req.Orbit.x = Must not have <<1[orbited/performed an uncrewed orbit of/performed a crewed orbit of]>> <<2>>
        #cc.req.Rendezvous = Must have performed <<1[a/an uncrewed/a crewed]>> rendezvous near <<2>>
        #cc.req.Rendezvous.x = Must not have performed <<1[a/an uncrewed/a crewed]>> rendezvous near <<2>>
        #cc.req.ReturnFromFlyBy = Must have returned from a <<1[a/an uncrewed/a crewed]>> fly-by of <<2>>
        #cc.req.ReturnFromFlyBy.x = Must not have returned from a <<1[a/an uncrewed/a crewed]>> fly-by of <<2>>
        #cc.req.ReturnFromSurface = Must have returned <<1[from/an uncrewed vessel from/a crewed vessel from]>> the surface of <<2>>
        #cc.req.ReturnFromSurface.x = Must not have returned <<1[from/an uncrewed vessel from/a crewed vessel from]>> the surface of <<2>>
        #cc.req.ReturnFromOrbit = Must have returned <<1[from/an uncrewed vessel from/a crewed vessel from]>> orbit of <<2>>
        #cc.req.ReturnFromOrbit.x = Must not have returned <<1[from/an uncrewed vessel from/a crewed vessel from]>> orbit of <<2>>
        #cc.req.SurfaceEVA = Must have performed a surface EVA on <<2>>
        #cc.req.SurfaceEVA.x = Must not have performed a surface EVA on <<2>>
        #cc.req.SplashDown = Must have <<1[splashed down/splashed an uncrewed vessel down/splashed a crewed vessel down]>> on <<2>>
        #cc.req.SplashDown.x = Must not have <<1[splashed down/splashed an uncrewed vessel down/splashed a crewed vessel down]>> on <<2>>


        //////////////////////////////////////////////////////////////////////
        // SCANsat
        //////////////////////////////////////////////////////////////////////
        #cc.scansat.scan.Anomaly = Anomaly Scan
        #cc.scansat.scan.AnomalyDetail = Anomaly Scan (Detailed)
        #cc.scansat.scan.Biome = Biome Scan
        #cc.scansat.scan.ResourceLoRes = Resources Scan (low resolution)
        #cc.scansat.scan.ResourceHiRes = Resources Scan (high resolution)
        #cc.scansat.scan.VisualLoRes = Visual Scan (low resolution)
        #cc.scansat.scan.VisualHiRes = Visual Scan (high resolution)
        // Scan Type, Body, Coverage
        #cc.scansat.param.SCANsatCoverage = <<1>> of <<2>>: <<3>>%
        #cc.scansat.param.SCANsatCoverage.inProgress = <<1>> of <<2>>: <<3>>% / <<4>>%
        // MinCoverage, MaxCoverage, Scan Type, Body
        #cc.scansat.req.SCANsatCoverage.between = Must have between <<1>>% and <<2>>% <<3>> coverage of <<4>>
        #cc.scansat.req.SCANsatCoverage.atLeast = Must have at least <<1>>% <<2>> coverage of <<3>>
        #cc.scansat.req.SCANsatCoverage.atMost = Must have at most <<1>>% <<2>> coverage of <<3>>
        // Scan Type, Latitude, Longitude, Body, Scan Type
        #cc.scansat.req.SCANsatLocationCoverage = Must have completed a <<1>> at location <<2>>, <<3>> on <<4>>
        #cc.scansat.req.SCANsatLocationCoverage.x = Must not have completed a <<1>> at location <<2>>, <<3>> on <<4>>


        //////////////////////////////////////////////////////////////////////
        // RemoteTech
        //////////////////////////////////////////////////////////////////////
        #cc.remotetech.param.CelestialBodyCoverage = Communication coverage: <<1>>: <<2>>%
        #cc.remotetech.param.CelestialBodyCoverage.inProgress = Communication coverage: <<1>>: <<2>>% / <<3>>%
        #cc.remotetech.param.HasAntenna.type = Type: <<1>>
        #cc.remotetech.param.HasAntenna.target = Target: <<C:1>>
        #cc.remotetech.param.HasAntenna.activated = Activated
        #cc.remotetech.param.HasAntenna.powered = Powered
        #cc.remotetech.param.HasAntenna.range = Range: <<1>>
        #cc.remotetech.param.HasAntenna.range.body = Range: In range of <<1>>
        #cc.remotetech.param.KSCConnectivity = Connected to KSC
        #cc.remotetech.param.KSCConnectivity.x = Not connected to KSC
        #cc.remotetech.param.SignalDelay = Signal Delay: <<1>> seconds 
        #cc.remotetech.param.VesselConnectivity = Direct connection to: <<1>>
        #cc.remotetech.param.VesselConnectivity.x = No Direct connection to: <<1>>
        #cc.remotetech.req.activeVesselRange = Must have a RemoteTech constellation orbiting <<1>> with an antenna or dish aimed at the active vessel and a range of at least <<2>> km
        #cc.remotetech.req.activeVesselRange.x = Must not have a RemoteTech constellation orbiting <<1>> with an antenna or dish aimed at the active vessel and a range of at least <<2>> km


        //////////////////////////////////////////////////////////////////////
        // Kerbal Konstructs
        //////////////////////////////////////////////////////////////////////
        #cc.kk.req.BaseUnlocked = Base <<1>> must be unlocked
        #cc.kk.req.BaseLocked = Base <<1>> must be locked
        #cc.kk.req.BaseOpen = Base <<1>> must be open
        #cc.kk.req.BaseClosed = Base <<1>> must be closed
        #cc.kk.req.BaseExists = Base <<1>> must exist
        #cc.kk.req.BaseExists.x = Base <<1>> must not exist
    }
}
