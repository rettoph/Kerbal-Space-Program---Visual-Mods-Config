//Words for my some Chinese friends:
//翻译：tinygrox   校对：阳耗子
Localization
{
    zh-cn
    {
        //////////////////////////////////////////////////////////////////////
        // Generic
        //////////////////////////////////////////////////////////////////////

        // Lists
        #cc.list.and.2 = <<1>> 和 <<2>>
        #cc.list.and.start = <<1>>, <<2>>
        #cc.list.and.middle = <<1>>, <<2>>
        #cc.list.and.end = <<1>>, 还有 <<2>>
        #cc.list.or.2 = <<1>> 或 <<2>>
        #cc.list.or.start = <<1>>, <<2>>
        #cc.list.or.middle = <<1>>, <<2>>
        #cc.list.or.end = <<1>>, 或 <<2>>

        // Science
        #cc.science.sit.InSpaceHigh = 远地太空
        #cc.science.sit.InSpaceLow = 近地太空
        #cc.science.location.Surface = 着陆
        #cc.science.location.Space = 在太空中
        #cc.science.experiment.many = 多种实验
        #cc.science.experiment.any = 任意
        #cc.science.biomeKSC = KSC
        #cc.science.biomeIdentifier = <<1>>的 <<2>>
        #cc.science.deployedScienceReport = 部署科学报告

        // Part stuff
        #cc.parts.battery = 电量
        #cc.parts.dock = 对接口
		#cc.parts.grapple = 抓取航天器

        // Expansions
		#cc.expansion.MakingHistory = Making History
        #cc.expansion.Serenity = Breaking Ground

        // Other stuff
        #cc.rateOfClimb = 爬升率
        #cc.altitude = 海拔
        #cc.apoapsis = 最远点
        #cc.periapsis = 近拱点
        #cc.eccentricity = 离心率
        #cc.inclination = 倾角
        #cc.acceleration = 加速度
        #cc.deltav.actual = Delta-v (实际)
        #cc.deltav.vacuum = Delta-v (真空)
        #cc.loadingtip = 分配合同中...
        #cc.experienceType = 特殊实验
		#cc.anyBody = 任何天体

        // Passenger loading
        #cc.loadPassengers.1 = 一个或多个合同需要搭载乘客。是否让其搭乘本载具？
        #cc.loadPassengers.2 = 要搭载的乘客：
        #cc.loadPassengers.3 = 载具上的空座位：<<1>>
        #cc.loadPassengers.passengerCount = <<N:1>> <<1[名乘客/名乘客]>>: <<2>>
        #cc.loadPassengers.button = 搭载乘客
        #cc.loadPassengers.button.no = 无乘客


        //////////////////////////////////////////////////////////////////////
        // Settings
        //////////////////////////////////////////////////////////////////////
        #cc.settings.Section = Contract Configurator
        #cc.settings.contractMultiplier.name = 进行中合同系数
        #cc.settings.contractMultiplier.desc = 调整进行中合同数量的系数.
        #cc.settings.contractGroups = 合同组
        #cc.settings.stockContracts = 原版合同 


        //////////////////////////////////////////////////////////////////////
        // Agencies
        //////////////////////////////////////////////////////////////////////
        #cc.agency.AsteroidRecovery.name = 小行星回收
        #cc.agency.CometSample.name = 彗星样本
        #cc.agency.AsteroidRecovery.desc = 我们购买小行星!小行星的价格是很高的,所以现在是时候卖掉你那些没用过的小行星废料了

        #cc.agency.BaseConstruction.name = 基地建设
        #cc.agency.BaseConstruction.desc = 在太阳系的其他地方建立基地可能是我们解决人口过剩的办法.

        #cc.agency.CollectScience.name = 科学收集
        #cc.agency.DeployedScience.name = 展开研究
        #cc.agency.CollectScience.desc = Wernher有一份表格,现在要你来填满它.要与科学相关的。

        #cc.agency.ContractConfigurator.name = Contract Configurator
        #cc.agency.ContractConfigurator.desc = 这是Contract Configurator合同的默认机构名称.如果你看到这个，那是因为合同的作者没有指定机构名称!

        #cc.agency.Exploration.name = 探索
        #cc.agency.Exploration.desc = 是什么驱使一个坎巴拉人去挑战他们的极限并探索新的边界? 这些合同.

        #cc.agency.FlagPlanting.name = 旗帜放置
        #cc.agency.FlagPlanting.desc = 我们太阳系中的天体缺少旗帜.我们需要看到更多的旗帜！

        #cc.agency.GrandTours.name = 游学旅行
        #cc.agency.GrandTours.desc = 加入太空计划, 看看太阳系!

        #cc.agency.ISRU.name = ISRU
        #cc.agency.ISRU.desc = 我们有些客户想让你从一个星球上开采些矿石, 然后把它转移到另一个星球.你觉得你能行吗? 

        #cc.agency.PartTesting.name = 部件测试
        #cc.agency.PartTesting.desc = 是这样的:我们现在有很多的部件, 我们准备用这些部件拿来造飞船. 但是我们不知道这些部件上太空后还能不能正常运行.  所以如果你能帮我们把这些部件带上太空顺便再测试一下, 那就太太太太太太棒了.

        #cc.agency.RescueAndRecovery.name = 救援与回收
        #cc.agency.RescueAndRecovery.desc = 有时候坎巴拉人会进入太空而忘记怎么回来.这些就是属于他们的故事.

        #cc.agency.Robotics.name = 机器人学
        #cc.agency.RoboticArm.name = 机器臂合同
        #cc.agency.RoboticScienceRetrieval.name = 机器人学回收
        #cc.agency.Robotics.desc = 利用机器人的技术提高我们的科学知识.

        #cc.agency.Satellites.name = 卫星
        #cc.agency.Satellites.desc = 卫星就是计划的一切! 我们需要更多的卫星-每个星球上都要有.那上面已经有卫星了? 那我们要它在不同的轨道上!

        #cc.agency.Sentinel.name = 哨兵
        #cc.agency.Sentinel.Asteroid.name = 哨兵（小行星监测）
        #cc.agency.Sentinel.Comet.name = 哨兵（彗星监测）
        #cc.agency.Sentinel.desc = 我们的“哨兵”红外望远镜将帮助我们识别出会威胁我们生命的小行星。睁大你的眼睛！

        #cc.agency.Stations.name = 空间站
        #cc.agency.Stations.desc = 建立空间站来获取大量声望!

        #cc.agency.Surveys.name = 调查
        #cc.agency.Surveys.desc = 我们想要你去一些地方.  一些具体的地方.

        #cc.agency.Tourism.name = 旅游观光
        #cc.agency.Tourism.desc = 我们的客户已经准备好了他们的热带衬衫,希望他们完成行程后,你能把它们送到阳光明媚的地方.

        // DMOS Agencies
        #cc.agency.Anomalies.name = 异常现象
        #cc.agency.AsteroidSurvey.name = 小行星勘察
        #cc.agency.MagneticSurvey.name = 地磁测量
        #cc.agency.ReconnaisanceSurvey.name = 勘察调查
        #cc.agency.OrbitalSurvey.name = 轨道测量


        //////////////////////////////////////////////////////////////////////
        // Mission Control UI
        //////////////////////////////////////////////////////////////////////
        #cc.mcui.title.trivial = 低难度:
        #cc.mcui.title.significant = 中等难度:
        #cc.mcui.title.exceptional = 高难度:
        #cc.mcui.title.allActive = 进行中:
        #cc.mcui.all = 全部
        #cc.mcui.max = 最大
        #cc.mcui.agent = 机构:
        #cc.mcui.contract = 合同:
        #cc.mcui.briefing = 概述:
        #cc.mcui.preRequisites = 前提:
        #cc.mcui.offered = 可接受:

        #cc.mcui.req.advance = 必须有<<1>>资金的预付款
        #cc.mcui.req.oneoff = 必须没有完成过此任务
        #cc.mcui.req.maxCompletions = 只能完成 <<1>> 次
        #cc.mcui.req.maxCompletions_reason = 之前已完成 <<1>> 次
        #cc.mcui.req.maxSimultaneous = 一次只能拥有<<1>>个进行中/可接受的  <<2>>的合同
        #cc.mcui.req.keyValue = <<1>> 必须有值
        #cc.mcui.req.researchBody = 必须探访过 <<1>>
        #cc.mcui.status.met = 满足
        #cc.mcui.status.unmet = 未满足
        #cc.mcui.req.failOnAcceptPrompt = The <<1>> contract is incompatible with\n<<2>>\n\nIf you accept this contract, all incompatible ones will fail. Are you sure?
        #cc.mcui.unknownParam = Unknown parameter


        //////////////////////////////////////////////////////////////////////
        // Parameters
        //////////////////////////////////////////////////////////////////////

        // Generic strings
        #cc.param.count = 数量:
        #cc.param.count.none = 无
        #cc.param.count.no = 否
        #cc.param.count.atLeast = 至少有<<n:1>>个
        #cc.param.count.atLeast.num = 至少有<<1>>个
        #cc.param.count.atMost = 至多有<<n:1>>个
        #cc.param.count.atMost.num = 至多有<<1>>个
        #cc.param.count.exact = <<N:1>>
        #cc.param.count.exact.num = <<1>>
        #cc.param.count.between = <<n:1>> 和 <<n:2>> 之间
        #cc.param.count.between.num = <<1>> 和 <<2>> 之间
        #cc.param.optionalTag = (可选)
        #cc.param.vessel.any = 任意载具
        #cc.param.vessel.Any = 任意载具

        // Parameter specific strings
        #cc.param.All = 完成下列所有要求
        #cc.param.Any = 完成下列任意一项
        #cc.param.AtLeast = 完成下列至少<<n:1>>项
        #cc.param.AtMost = 允许下列不超过<<n:1>>项
        #cc.param.Duration.preWait = 等待所需时间:
        #cc.param.Duration.waiting = 完成时间:
        #cc.param.Duration.completion = 完成
        // count, trait, experience
        #cc.param.HasAstronaut.1 = 宇航员: <<1>>
        #cc.param.HasAstronaut.2 = 宇航员: <<1>>是<<2>>
        #cc.param.HasAstronaut.3 = 宇航员: <<1>>是<<2>>且等级为<<3>>
        #cc.param.HasAstronaut.trait = <<1>>职业
        #cc.param.HasAstronaut.experience.atLeast = 技能等级至少需要达到 <<1>>
        #cc.param.HasAstronaut.experience.atMost = 技能等级不超过 <<1>>
        #cc.param.HasAstronaut.experience.exact = 技能等级为 <<1>>
        #cc.param.HasAstronaut.experience.between = 技能等级需要 <<1>> 到 <<2>> 之间
        #cc.param.KerbalDeaths.generic = <<n:1[无坎巴拉人死亡/不超过一位坎巴拉人死亡/不超过 $d位坎巴拉人死亡]>>
        #cc.param.KerbalDeaths.vessel = 载具<<2>>上<<n:1[无坎巴拉人死亡/不超过一位坎巴拉人死亡/不超过 $d位坎巴拉人死亡]>> 
        #cc.param.KerbalDeaths.specific = 保证他们存活
        #cc.param.MissionTimer = 任务计时:
        #cc.param.None = 防止以下所有情况
        #cc.param.Not = 不为真
        #cc.param.ParameterDelegate.MatchExtension.validate = 带有
        #cc.param.ParameterDelegate.MatchExtension.all = 全部拥有
        #cc.param.ParameterDelegate.MatchExtension.none = 无拥有
        #cc.param.PerformOrbitalSurvey = 进行轨道<<1>>的资源调查
        #cc.param.ReachSpace = 进入太空
        #cc.param.RecoverKerbal.one = 回收 <<1>>
        #cc.param.RecoverKerbal.many = 回收坎巴拉人
        #cc.param.Sequence = 按顺序完成下列目标
        #cc.param.TargetDestroyed = <<N:1[$d 目标/$d 目标]>> 已损毁
        #cc.param.Timer.expired = 超过时限!
        #cc.param.Timer.active = 剩余时间: <<1>>
        #cc.param.Timer.inactive = 领取期限: <<1>>
        #cc.param.VesselParameterGroup.default = 载具: <<1>>
        #cc.param.VesselParameterGroup.trackedVessel = 追踪载具: <<1>>
        #cc.param.VesselParameterGroup.newVessel = 载具: <<1>> (新)
        #cc.param.VesselParameterGroup.anyVessel = 载具: 任意
        #cc.param.VesselParameterGroup.anyVesselList = 载具: 以下任意一项: <<1>>
        #cc.param.VesselParameterGroup.anyVesselListEmpty = 载具: 以下任意
        #cc.param.VesselParameterGroup.complete = 载具: <<1>>: <<2>>
        #cc.param.VesselParameterGroup.notes.noVessel = 目前没有符合范围的载具.
        #cc.param.VesselParameterGroup.notes.activeVessel = 使用中的载具.
        #cc.param.VesselParameterGroup.notes.waitingVessel = 等待完成时间 <<1>>.
        #cc.param.VesselParameterGroup.duration = 持续时间: <<1>>
        #cc.param.CollectScience.rm.None = 无
        #cc.param.CollectScience.rm.Recover = 回收
        #cc.param.CollectScience.rm.Transmit = 传输
        #cc.param.CollectScience.rm.RecoverOrTransmit = 回收或传输数据
        #cc.param.CollectScience.0 = 收集科学点数


        // Experiments, biome/CB, situation
        #cc.param.CollectScience.1 = 收集科学点数: <<1>>
        #cc.param.CollectScience.2 = 收集科学点数: <<1>> 从 <<2>>
        #cc.param.CollectScience.3 = 收集科学点数: <<1>> 从 <<2>> 在 <<3>>
        #cc.param.CollectScience.destination = 目的地: <<C:1>>
        #cc.param.CollectScience.location = 地点: <<C:1>>
        #cc.param.CollectScience.biome = 生态群系: <<C:1>>
        #cc.param.CollectScience.situation = 条件: <<C:1>>
        #cc.param.CollectScience.experiment = 实验: <<1>>
        #cc.param.CollectScience.recovery = 回收: <<1>>
        #cc.param.Docking.1 = 与目标对接: <<1>>
        #cc.param.Docking.2 = 对接: <<1>> 和 <<2>>
        #cc.param.HasAntenna.transmit = 天线功耗(合并): <<1>>
        #cc.param.HasAntenna.relay = 中继天线功耗(合并): <<1>>
        #cc.param.HasCrew.unmanned = 无人驾驶
        // count, trait, experience
        #cc.param.HasCrew = 乘员
        #cc.param.HasCrew.1 = 乘员: <<1>>
        #cc.param.HasCrew.2 = 乘员: <<1>> 为 <<2>>
        #cc.param.HasCrew.3 = 乘员: <<1>> 为 <<2>> 和 <<3>>
        #cc.param.HasCrew.trait = 职业: <<1>>
        #cc.param.HasCrew.experience = 经验等级: <<1>>
        #cc.param.HasCrew.specific = <<1>>: 在载具上
        #cc.param.HasCrewCapacity.none = 无
        #cc.param.HasCrewCapacity = 乘员容量: <<1>>
        #cc.param.HasPassenger = 乘客
        #cc.param.HasPassenger.initial = 在发射台/跑道装载<<n:1[所有乘客/$d 乘客/$d 乘客]>>
        #cc.param.HasPassenger.summary = 乘客: <<1>>
        #cc.param.HasPassenger.detail = 在载具上: <<1>>
        #cc.param.HasResource = 资源
        #cc.param.HasResource.capacity = 资源容量: <<1>>: <<2>>
        #cc.param.HasResource.resource = 资源: <<1>>: <<2>>
        #cc.param.HasResource.notzero = 非零
        #cc.param.HasResource.measure = <<1>> 单位
        #cc.param.IsNotVessel = 载具: 非 <<1>>
        #cc.param.NewVessel = 发射一艘新的航天器
        #cc.param.NoStaging = 载具未分级
        #cc.param.Orbit = 在轨
        #cc.param.Orbit.detail = 入轨: <<1>>
        #cc.param.Orbit.below.meters = <<C:1>>: 低于<<2>>米
        #cc.param.Orbit.above.meters = <<C:1>>: 高于<<2>>米
        #cc.param.Orbit.between.meters = <<C:1>>: 处于<<2>>米至<<3>>米
        #cc.param.Orbit.below.nounits = <<C:1>>: 低于<<2>>
        #cc.param.Orbit.above.nounits = <<C:1>>: 高于<<2>>
        #cc.param.Orbit.between.nounits = <<C:1>>: 在 <<2>> 到 <<3>>
        #cc.param.Orbit.below.degrees = <<C:1>>: 低于<<2>>\u00B0
        #cc.param.Orbit.above.degrees = <<C:1>>: 高于<<2>>\u00B0
        #cc.param.Orbit.between.degrees = <<C:1>>: 处在<<2>>\u00B0 到 <<3>>\u00B0之间
        #cc.param.Orbit.specified = 到达指定轨道
        #cc.param.PartValidation = 部件
        #cc.param.PartValidation.nocount = 部件: <<1>>
        #cc.param.PartValidation.atLeast = 部件: 至少 <<n:1>> 个<<2>>
        #cc.param.PartValidation.atMost = 部件: 至多 <<n:1>> 个<<2>>
        #cc.param.PartValidation.withModule = 存在模块: <<1>>
        #cc.param.PartValidation.withModuleType = 存在模块类型: <<1>>
        // <<With/All have/None have>> <<2>>: <<3>>
        #cc.param.PartValidation.generic = <<1>> <<c:2>>: <<3>>
        #cc.param.PartValidation.type = <<1>> 类型: <<2>>
        #cc.param.PartValidation.module = <<1>> 模块: <<2>>
        #cc.param.PartValidation.moduleType = <<1>> 模块类型: <<2>>
        #cc.param.PartValidation.moduleShort = <<1>> 模块
        #cc.param.PartValidation.category = <<1>> 类别: <<2>>
        #cc.param.PartValidation.manufacturer = <<1>> 制造商: <<2>>
        #cc.param.ReachState = 载具状态
        #cc.param.ReachState.detail = 载具状态: <<1>>
        #cc.param.ReachState.altitudeTerrain = 高度 (地面)
        #cc.param.ReachState.mode.srf = Surface speed
        #cc.param.ReachState.mode.obt = Orbital speed
        #cc.param.ReachState.below.speed = <<C:1>>: 小于 <<2>> m/s
        #cc.param.ReachState.above.speed = <<C:1>>: 大于 <<2>> m/s
        #cc.param.ReachState.between.speed = <<C:1>>: 处于 <<2>> m/s 到 <<3>> m/s 之间
        #cc.param.ReachState.below.acceleration = <<C:1>>: 小于 <<2[$d G/$d G]>>
        #cc.param.ReachState.above.acceleration = <<C:1>>: 大于 <<2[$d G/$d G]>>
        #cc.param.ReachState.between.acceleration = <<C:1>>: 处在 <<2>> 到 <<3>> G力之间
        #cc.param.Rendezvous.1 = 与目标交会: <<1>>
        #cc.param.Rendezvous.2 = 交会: <<1>> 和 <<2>>
        #cc.param.ResourceConsumption.consumption = 资源消耗: <<1>>: <<2>>
        #cc.param.ResourceConsumption.production = 资源产生: <<1>>: <<2>>
        #cc.param.ResourceConsumption.atLeast = 至少 <<1>> 单位/s
        #cc.param.ResourceConsumption.atMost = 至多 <<1>> 单位/s
        #cc.param.ResourceConsumption.between = 在 <<1>> 到 <<2>> 单位/s之间
        #cc.param.ReturnHome = 在<<1>>上着陆或溅落
        #cc.param.VesselDestroyed = 载具已坠毁
        #cc.param.VesselHasVisited.BoardVessel = 在<<1>>上进入载具
        #cc.param.VesselHasVisited.Die = 死在<<1>>上
        #cc.param.VesselHasVisited.Escape = 从<<1>>逃逸
        #cc.param.VesselHasVisited.ExitVessel = 在<<1>>上出舱
        #cc.param.VesselHasVisited.Flight = 在<<1>>进行一次飞行
        #cc.param.VesselHasVisited.Flyby = 飞掠<<1>>
        #cc.param.VesselHasVisited.Land = 在<<1>>进行一次着陆
        #cc.param.VesselHasVisited.Launch = 从<<1>>上面发射起飞
        #cc.param.VesselHasVisited.Orbit = 进入<<1>>的轨道
        #cc.param.VesselHasVisited.PlantFlag = 在<<1>>上面竖起一面旗帜
        #cc.param.VesselHasVisited.Recover = 在<<1>>上面回收
        #cc.param.VesselHasVisited.Spawn = 在<<1>>上重生(暂译，原文Spawn on <<1>>)
        #cc.param.VesselHasVisited.Suborbit = 进入<<1>>亚轨道
        #cc.param.VesselIsType = 载具类型: <<1>>
        #cc.param.VesselMass = 质量: <<1>>
        #cc.param.VesselMass.atLeast = 至少<<1>>吨
        #cc.param.VesselMass.atMost = 最多<<1>>吨
        #cc.param.VesselMass.between = 在<<1>>到<<2>>吨之间
        #cc.param.VesselNotDestroyed = 不能损毁: <<1>>
        #cc.param.VesselNotDestroyed.any = 无载具损毁
        #cc.param.VisitWaypoint = 位置:  高于<<2>><<1>>米


        //////////////////////////////////////////////////////////////////////
        // Requirements
        //////////////////////////////////////////////////////////////////////
        #cc.req.AcceptContract = 必须先接受合同 <<1>>
        #cc.req.AcceptContract.x = 必须没有接受合同 <<1>>
        #cc.req.All = 必须满足以下<color=#<<1>>>所有</color>条件
        #cc.req.All.x = 不得满足以下<color=#<<1>>>任意</color>条件
        #cc.req.AltitudeRecord = 高度必须达到至少<<1>>米
        #cc.req.AltitudeRecord.x = 高度必须低于<<1>>米
        #cc.req.AltitudeRecord.additional = <<1>> (当前记录: <<2>>米)
        #cc.req.Any = 必须满足以下<color=#<<1>>>任意</color>条件
        #cc.req.Any.x = 不能满足以下<color=#<<1>>>所有</color>条件
        #cc.req.AtLeast = 至少满足以下条件中的<color=#<<1>>><<n:2>></color>项
        #cc.req.AtMost = 至多满足以下条件中的<color=#<<1>>><<n:2>></color>项
        #cc.req.CanResearchTech = 必须能够研发<<1>>
        #cc.req.CanResearchTech.x = 必须不能研发<<1>>
        #cc.req.CompleteContract =   必须先完成合同<<1>>
        #cc.req.CompleteContract.x = 必须未完成合同<<1>>
        #cc.req.CompleteContract.cooldown = 必须在过去的<<2>>内完成合同<<1>>
        #cc.req.CompleteContract.cooldown.x = 必须在过去的<<2>>内没有完成合同<<1>> 
        #cc.req.Expansion = 必须拥有<<1>>DLC
        #cc.req.Facility.exact = <<1>>的等级必须为<<n:2>>
        #cc.req.Facility.atLeast = <<1>>等级必须至少为<<n:2>>
        #cc.req.Facility.atMost = <<1>>等级必须不超过<<n:2>>
        #cc.req.FirstCrewToSurvive = 必须从太空中救援了一名乘员
        #cc.req.FirstCrewToSurvive.x = 必须未从太空中救援回来任何乘员
        #cc.req.FirstLaunch = 必须已经完成第一次发射任务
        #cc.req.FirstLaunch.x = 必须未完成第一次发射任务
        #cc.req.Funds.between = 必须剩余<<1>>到<<2>>的资金
        #cc.req.Funds.atLeast = 必须至少剩余<<1>>的资金
        #cc.req.Funds.atMost = 必须剩余不超过<<1>>的资金
        #cc.req.HasAstronaut.1 = 必须有<<c:1>>位宇航员
        #cc.req.HasAstronaut.2 = 必须有<<c:1>>位是<<2>>的宇航员
        #cc.req.HasAstronaut.3 = 必须有<<c:1>>位是<<2>>且等级为<<3>>的宇航员
        #cc.req.HasAstronaut.1.x = 必须没有<<c:1>>宇航员
        #cc.req.HasAstronaut.2.x = 必须没有<<c:1>>是<<2>>的宇航员
        #cc.req.HasAstronaut.3.x = 必须没有<<c:1>>是<<2>>且等级为<<3>>的宇航员
        #cc.req.KSCLanding = 必须在KSC着陆
        #cc.req.KSCLanding.x = 不在KSC着陆
        #cc.req.PartModuleTypeUnlocked = 必须解锁了<<1>>类型的<<2[部件/部件]>>
        #cc.req.PartModuleTypeUnlocked.x = 必须尚未解锁类型<<1>>的<<2[部件/部件]>>
        #cc.req.PartModuleUnlocked = 必须解锁了带<<1>>的<<2[部件/部件]>>
        #cc.req.PartModuleUnlocked.x = 必须尚未解锁带<<1>>的<<2[部件/部件]>>
        #cc.req.PartUnlocked = 必须解锁了<<2[部件/部件]>> <<1>>
        #cc.req.PartUnlocked.x = 必须未解锁<<2[部件/部件]>> <<1>>
        #cc.req.PerformOrbitalSurvey = 必须进行一次对<<1>>的轨道扫描
        #cc.req.PerformOrbitalSurvey.x = 必须没进行过<<1>>的轨道扫描
        #cc.req.ReachSpace = 必须进入太空
        #cc.req.ReachSpace.x = 必须未进入过太空
        #cc.req.Reputation.between = 必须有<<1>>到<<2>>之间的声望点数
        #cc.req.Reputation.atLeast = 必须至少有<<1>>声望
        #cc.req.Reputation.atMost = 必须剩余不超过<<1>>声望
        #cc.req.RunwayLanding = 必须在跑道上着陆
        #cc.req.RunwayLanding.x = 不能着陆在跑道上
        #cc.req.Science.between = 必须有<<1>>到<<2>>之间的科学点数
        #cc.req.Science.atLeast = 必须至少有<<1>>科学点数
        #cc.req.Science.atMost = 必须不超过<<1>>科学点数
        #cc.req.Spacewalk = 必须进行过一次太空行走
        #cc.req.Spacewalk.x = 必须没有进行过太空行走
        #cc.req.TechResearched.tech = 必须研发了<<1>>
        #cc.req.TechResearched.tech.x = 必须没有研发<<1>>
        #cc.req.TechResearched.part = 必须研究了<<1>>
        #cc.req.TechResearched.part.x = 必须未研究<<1>>
        #cc.req.ValidVessel = 载具<<1>>必须是有效载具
        #cc.req.ValidVessel.x = 载具<<1>>必须是非有效载具
        #cc.req.ProgressCelestialBody.genericBody = 目标天体
        #cc.req.BaseConstruction = 必须在<<2>>已有<<1[一个/一个无人/一个载人]>>基地
        #cc.req.BaseConstruction.x = 必须在<<2>>没有<<1[一个/一个无人/一个载人]>>基地 
        #cc.req.Docking = 必须在<<2>>范围内进行过<<1[对接/无人对接/载人对接]>> 
        #cc.req.Docking.x = 必须没有在<<2>>范围内进行过<<1[对接/无人对接/载人对接]>> 
        #cc.req.Escape = 必须从<<2>><<1[逃逸过/进行无人逃逸/进行载人逃逸]>> 
        #cc.req.Escape.x = 必须没有从<<2>><<1[逃逸过/进行过无人逃逸/载人逃逸]>>
        #cc.req.FlyBy = 必须<<1[飞掠过/无人飞掠过/载人飞掠过]>><<2>>
        #cc.req.FlyBy.x = 必须没有<<1[飞掠过/无人飞掠过/载人飞掠过]>><<2>>
        #cc.req.Landing = 必须<<1[着陆过/进行过一次无人降落在/进行过一次载人降落在]>><<2>>
        #cc.req.Landing.x = 必须没有<<1[着陆过/进行过一次无人降落在/进行过一次载人降落在]>><<2>>
        #cc.req.Orbit = 必须<<1[环绕过/无人载具环绕过/载人环绕过]>> <<2>>
        #cc.req.Orbit.x = 必须没有<<1[环绕过/无人载具环绕过/载人环绕过]>> <<2>>
        #cc.req.Rendezvous = 必须在<<2>>附近有过<<1[一次/无人载具/载人]>>交会
        #cc.req.Rendezvous.x = 必须在<<2>>附近有过<<1[一次/无人载具/载人]>>交会
        #cc.req.ReturnFromFlyBy = 必须从<<2>>有<<1[一次/无人载具/载人]>>飞掠返回
        #cc.req.ReturnFromFlyBy.x = 必须从<<2>>没有<<1[一次/无人载具/载人]>>飞掠返回
        #cc.req.ReturnFromSurface = 必须是<<1[从/一个无人载具从/一个载人载具]>><<2>>的地面上返回
        #cc.req.ReturnFromSurface.x = 必须没有<<1[从/一个无人载具从/一个载人载具]>><<2>>的地面上返回
        #cc.req.ReturnFromOrbit = 必须有<<1[从/一个无人载具从/一个载人载具从]>><<2>>的轨道上返回过
        #cc.req.ReturnFromOrbit.x = 必须没有<<1[从/一个无人载具从/一个载人载具从]>><<2>>的轨道上返回过
        #cc.req.SurfaceEVA = 必须在<<2>>的地面上EVA(出舱)过
        #cc.req.SurfaceEVA.x = 必须没有在<<2>>的地面上EVA(出舱)过
        #cc.req.SplashDown = 必须<<1[溅落/有一个无人载具溅落/有一个载人载具溅落]>>在<<2>>过
        #cc.req.SplashDown.x = 必须没有<<1[溅落/有一个无人载具溅落/有一个载人载具溅落]>>在<<2>>过


        //////////////////////////////////////////////////////////////////////
        // SCANsat
        //////////////////////////////////////////////////////////////////////
        #cc.scansat.scan.Anomaly = 异常点扫描
        #cc.scansat.scan.AnomalyDetail = 异常点扫描(详细)
        #cc.scansat.scan.Biome = 生态群落扫描
        #cc.scansat.scan.ResourceLoRes = 资源扫描(低分辨率)
        #cc.scansat.scan.ResourceHiRes = 资源扫描(高分辨率)
        #cc.scansat.scan.VisualLoRes = 光学扫描(低分辨率)
        #cc.scansat.scan.VisualHiRes = 光学扫描(高分辨率)
        // Scan Type, Body, Coverage
        #cc.scansat.param.SCANsatCoverage = 在<<2>>的<<1>>: <<3>>%
        #cc.scansat.param.SCANsatCoverage.inProgress = 在<<2>>的<<1>>: <<3>>% / <<4>>%
        // MinCoverage, MaxCoverage, Scan Type, Body
        #cc.scansat.req.SCANsatCoverage.between = <<4>>的<<3>>完成度必须为 <<1>>% 到 <<2>>% 之间 
        #cc.scansat.req.SCANsatCoverage.atLeast = <<3>>的<<2>>完成度必须至少为 <<1>>% 
        #cc.scansat.req.SCANsatCoverage.atMost = <<3>>的<<2>>完成度必须不超过 <<1>>% 
        // Scan Type, Latitude, Longitude, Body, Scan Type
        #cc.scansat.req.SCANsatLocationCoverage = 在<<4>>上的地点经<<3>>, 纬<<2>>的<<1>>必须是已完成的
        #cc.scansat.req.SCANsatLocationCoverage.x = 在<<4>>上的地点经<<3>>, 纬<<2>>的<<1>>必须尚未完成 


        //////////////////////////////////////////////////////////////////////
        // RemoteTech
        //////////////////////////////////////////////////////////////////////
        #cc.remotetech.param.CelestialBodyCoverage = 通信覆盖: <<1>>: <<2>>%
        #cc.remotetech.param.CelestialBodyCoverage.inProgress = 通信覆盖: <<1>>: <<2>>% / <<3>>%
        #cc.remotetech.param.HasAntenna.type = 类型: <<1>>
        #cc.remotetech.param.HasAntenna.target = 目标: <<1>>
        #cc.remotetech.param.HasAntenna.activated = 激活
        #cc.remotetech.param.HasAntenna.powered = 供电
        #cc.remotetech.param.HasAntenna.range = 范围: <<1>>
        #cc.remotetech.param.HasAntenna.range.body = 范围: 在<<1>>的范围内
        #cc.remotetech.param.KSCConnectivity = 已连接到KSC
        #cc.remotetech.param.KSCConnectivity.x = 没有连接到KSC
        #cc.remotetech.param.SignalDelay = 信号延迟: <<1>> 秒
        #cc.remotetech.param.VesselConnectivity = 直连到: <<1>>
        #cc.remotetech.param.VesselConnectivity.x = 没有直连: <<1>>
        #cc.remotetech.req.activeVesselRange = 必须有一个对准可控制载具且天线范围至少有<<2>>km的绕<<1>>运行的RemoteTech卫星星座 
        #cc.remotetech.req.activeVesselRange.x = 必须不存在一个对准可控制载具且天线范围至少有<<2>>km的绕<<1>>运行的RemoteTech卫星星座


        //////////////////////////////////////////////////////////////////////
        // Kerbal Konstructs
        //////////////////////////////////////////////////////////////////////
        #cc.kk.req.BaseUnlocked = 基地 <<1>> 必须已解锁
        #cc.kk.req.BaseLocked = 基地 <<1>> 必须锁定
        #cc.kk.req.BaseOpen = 基地 <<1>> 必须启用
        #cc.kk.req.BaseClosed = 基地 <<1>> 必须关闭
        #cc.kk.req.BaseExists = 基地<<1>>必须存在
        #cc.kk.req.BaseExists.x = 基地<<1>>必须不存在
    }
}
