CONTRACT_TYPE
{
    //Credits to Severedsolo
    name = MedicalEmergency
    title = Medical Emergency on board @/targetVessel1
	genericTitle = Medical Emergency on a Base or Station
    group = BasesandStations
	description = Oh dear! Poor @/targetKerbal1 is feeling quite under the weather. Just to be safe, we'd like you to bring him home.
	genericDescription = One of your Kerbals is feeling sick and needs to be brought home.
    synopsis = Bring @/targetKerbal1 back to @/homeworld for medical examination
    completedMessage = Our Medics tell us that @/targetKerbal1 is going to be okay!
    minExpiry = 1
    maxExpiry = 7
	maxSimultaneous = 1
    cancellable = false
    declinable = true
    rewardScience = 0.0
    rewardReputation = Random(1, 2)
    rewardFunds = Random(40000, 60000.0)
    failureReputation = 1
    failureFunds = Random(1000, 10000.0)
    advanceFunds = Random(1000, 10000.0)
	targetBody = @/targetBody1
    
	DATA
    {
        type = Vessel
		requiredValue = true
		title = Bases should have some crew.
		uniquenessCheck = GROUP_ACTIVE
		targetVessel1 = AllVessels().Where(v => ((v.IsLanded() && v.VesselType()== Base) || (v.VesselType() == Station)) && v.CrewCount()>= 1).Random()
    }
	
	DATA
	{
        type = CelestialBody
		requiredValue = true
		targetBody1 = @/targetVessel1.CelestialBody()
		hidden = true
    }
	
	DATA
	{
        type = CelestialBody
		requiredValue = true
		homeworld = HomeWorld()
		hidden = true
    }
	
	DATA
	{
		type = Kerbal
		uniquenessCheck = GROUP_ACTIVE
		targetKerbal1 = @targetVessel1.Crew().Random()
		title = Finding a sick Kerbal.
	} 
	
	PARAMETER
	{
		name = RecoverKerbal
		type = RecoverKerbal
		kerbal = @/targetKerbal1
		title = Recover @/targetKerbal1
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = MedicalEmergency
		minCount = 0
		cooldownDuration = 10d
	}

	// REQUIREMENT
	// {
		// name = CompleteContract
		// type = Expression
		// expression = (!@/targetBody1.IsHomeWorld() && !@/targetKerbal1.RosterStatus()==Available)
		// title = The Kerbal to be recovered should not be available in the Roster.
	// }
	
	REQUIREMENT
	{
		name = RandomRoll
		type = Expression
		checkOnActiveContract = false
		expression = @BasesandStations:randomRoll <3
		title = The RNG must like you
	}
}