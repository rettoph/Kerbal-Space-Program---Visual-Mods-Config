CONTRACT_TYPE
{
    name = TourismVisitBase
    title = Visit @targetVessel with @TourismExpanded:touristCount.Print() tourists
    genericTitle = Visit a base with tourists
    group = TourismExpanded

    description = This group of @TourismExpanded:touristCount.Print() tourists wishes to visit @targetVessel
    genericDescription = A group of tourists wishes to visit a base
    synopsis = Bring these tourists to @targetVessel then bring them home
    completedMessage = The tourists have successfully made it back from @targetVessel

    minExpiry = 5
    maxExpiry = 10
    deadline = 1

    prestige = Significant

    targetBody = @targetVessel.CelestialBody()

    maxSimultaneous = 10

    rewardReputation = 3.0
    failureReputation = 10.0

    DATA
    {
        type = Vessel

        uniquenessCheck = CONTRACT_ACTIVE
        title = Must have a base with sufficient empty space

        targetVessel = AllVessels().Where(v => v.VesselType() == Base && v.IsLanded() && v.EmptyCrewSpace() > @TourismExpanded:touristCount).Random()
    }

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        vessel = @/targetVessel

        duration = 7d

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        count = @TourismExpanded:touristCount
    }

    BEHAVIOUR
    {
        name = SetDeadline
        type = SetDeadline
    }

    BEHAVIOUR
    {
        name = SetRewardFunds
        type = SetRewardFunds

        landing = true
        count = @TourismExpanded:touristCount
    }

    REQUIREMENT
    {
        name = Landing
        type = Landing
        checkOnActiveContract = false
    }
}