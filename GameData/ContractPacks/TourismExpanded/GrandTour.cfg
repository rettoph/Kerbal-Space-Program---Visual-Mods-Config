CONTRACT_TYPE
{
    name = TourismGrandTour
    title = Grand tour of @targetBody with @TourismExpanded:touristCount.Print() tourists
    genericTitle = Grand tour of the sun with tourists
    group = TourismExpanded

    description = This group of @TourismExpanded:touristCount.Print() tourists wishes to visit all planets and moons orbiting @targetBody
    genericDescription = A group of tourists wishes to visit all planets and moons orbiting the sun
    synopsis = Visit all planets and moons orbiting @targetBody then bring them home
    completedMessage = The tourists have successfully made it back from their grand tour!

    minExpiry = 5
    maxExpiry = 10
    deadline = 1

    prestige = Exceptional

    targetBody = Sun()

    maxSimultaneous = 1

    rewardReputation = 20.0
    failureReputation = 10.0

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = Flyby of planets and moons without surfaces

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            trait = Pilot
        }

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }

        PARAMETER
        {
            type = ReachState

            disableOnStateChange = true

            targetBody = @targetFlyby
            maxAltitude = @targetFlyby.SpaceAltitudeThreshold()

            ITERATOR
            {
                type = CelestialBody
                targetFlyby = AllBodies().Where(b => !b.HasSurface() && !b.IsSun())
            }
        }
    }

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = Land on planets and moons with surfaces

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            trait = Pilot
        }

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }

        PARAMETER
        {
            type = ReachState

            disableOnStateChange = true

            targetBody = @targetLanding
            situation = LANDED

            ITERATOR
            {
                type = CelestialBody
                targetLanding = AllBodies().Where(b => b.HasSurface() && !b.IsHomeWorld())
            }
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        count = @TourismExpanded:touristCount
    }

    BEHAVIOUR
    {
        name = SetDeadline
        type = SetDeadline

        multipleDest = true
    }

    BEHAVIOUR
    {
        name = SetRewardFunds
        type = SetRewardFunds

        landing = false
        multipleDest = true
        count = @TourismExpanded:touristCount
    }

    REQUIREMENT
    {
        name = Orbit
        type = Orbit

        checkType = MANNED
    }
}