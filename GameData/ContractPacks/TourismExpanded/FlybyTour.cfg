CONTRACT_TYPE
{
    name = TourismFlybyTour
    title = Flyby of @targetBody and its @/moonsText with @TourismExpanded:touristCount.Print() tourists
    genericTitle = Flyby of a planet and its moons with tourists
    group = TourismExpanded

    description = This group of @TourismExpanded:touristCount.Print() tourists wishes to do a flyby of @targetBody and its @/moonsText
    genericDescription = A group of tourists wishes to do a flyby of a planet and its moons
    synopsis = Flyby of @targetBody and its @/moonsText then bring them home
    completedMessage = The tourists have successfully made it back from @targetBody

    minExpiry = 5
    maxExpiry = 10
    deadline = 1

    prestige = Significant

    targetBody = OrbitedBodies().Where(b => b.IsPlanet() && b.Children().Count() > 0).Random()

    maxSimultaneous = 10

    rewardReputation = 5.0
    failureReputation = 10.0

    DATA
    {
        type = CelestialBody

        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true

        body = @targetBody
    }

    DATA
    {
        type = List<CelestialBody>

        hidden = true

        moons = AllBodies().Where(b => b.Parent() == @targetBody)
    }

    DATA
    {
        type = bool

        hidden = true

        multipleMoons = @/moons.Count() > 1
    }

    DATA
    {
        type = string

        hidden = true

        moonsText = @/multipleMoons ? "@/moons.Count() moons" : "moon"
    }

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = Do a flyby of @/targetBody

        hidden = @targetBody.IsHomeWorld()

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            trait = Pilot
        }

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            maxAltitude = @/targetBody.SpaceAltitudeThreshold()
        }
    }

    PARAMETER
    {
        name = VesselParameterGroup
        type = VesselParameterGroup

        title = Do a flyby of @/targetBody's @/moonsText

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            trait = Pilot
        }

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            targetBody = @targetMoon

            disableOnStateChange = true

            maxAltitude = @targetMoon.SpaceAltitudeThreshold()

            ITERATOR
            {
                type = CelestialBody
                targetMoon = @/targetBody.Children()
                
            }
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        count = @TourismExpanded:touristCount
    }

    BEHAVIOUR
    {
        name = SetDeadline
        type = SetDeadline

        delay = 1
        multipleDest = true
    }

    BEHAVIOUR
    {
        name = SetRewardFunds
        type = SetRewardFunds

        landing = false
        multipleDest = true
        count = @TourismExpanded:touristCount
    }

    REQUIREMENT
    {
        name = Orbit
        type = Orbit
        checkOnActiveContract = false
    }
}