    CONTRACT_TYPE
    {
        name = KerbalAcademyEngineering101
        title = Kerbal Academy: Engineering 101
		group = KerbalAcademy
        description = Looks like @/trainee doesn't know a hammer from a socket wrench. Good job @/mentor is on hand to help.
		genericDescription = One of our Engineers is lagging behind their colleagues. Luckily we have a mentor on hand.
        synopsis = Take @/trainee and @/mentor on a training exercise
        completedMessage = Perfect. @/trainee can feel the benefit of @/mentor and their experience already.
		notes = This is just a simulation. The "broken" part will appear to be functioning correctly.
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost
		
		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			mentor = AllKerbals().Where(m => m.ExperienceTrait() == Engineer && m.ExperienceLevel()>=2 && m.Type() == Crew && m.RosterStatus() == Available).Random()
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Engineer && m.ExperienceLevel()<= @/minExperience && m.Type() == Crew && m.RosterStatus() == Available).Random()
			title = Must have a Kerbal who qualifies for the basic program, and a mentor at least two levels ahead of them.
		}

		DATA
		{
			type = int
			levelGain = @/mentor.ExperienceLevel() - @/trainee.ExperienceLevel()-1
			newLevel = Random(1, @/mentor.ExperienceLevel()-1)
		}
	
		DATA
		{
			type = double
			rewardMultiplier = Random(@/newLevel, @/levelGain)
			trainingCost = @/rewardMultiplier*-100000
			expAward = @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			minExperience = @/mentor.ExperienceLevel()-2
			simLevel = Random((@/trainee.ExperienceLevel()+1), @newLevel)
			simTime = Random(60, @simLevel*100)
		}

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}

		BEHAVIOUR
	{
    name = DialogBox
    type = DialogBox
	
		DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = ChuteCheck
		titleColor = #BADA55
		TEXT
			{
			text = Ok time for you to show me what you can do. In this simulation the parachute has been broken. Get outside and fix it.
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}	
		}

		DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = LegCheck
		titleColor = #BADA55
		TEXT
			{
			text = Ok time for you to show me what you can do. In this simulation the landing legs are refusing to deploy. Get outside and fix them.
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}	
		}

				DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = WheelCheck
		titleColor = #BADA55
		TEXT
			{
			text = Ok time for you to show me what you can do. In this simulation the wheels are not getting any power. Get outside and fix them.
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}	
		}

		DIALOG_BOX
		{
		condition = PARAMETER_COMPLETED
		parameter = EVASim
		titleColor = #BADA55
		TEXT
			{
			text = Great job! Your medal will be waiting when you return to the KSC.
			textColor = #BADA55
			}
       INSTRUCTOR
			{
			name = Instructor_Gene
			showName = false
			}	
		}
	}
	
	
	PARAMETER
	{
	name = ChuteCheck
	type = All
	hideChildren = true
	title = Take @/mentor and @/trainee out in a craft which contains a parachute.
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/mentor	
			kerbal = @/trainee
		}

		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleParachute
		}
		REQUIREMENT
			{
				name = Expression
				type = Expression
				expression = @/simLevel == 1
			}
	}
	
	PARAMETER
	{
	name = LegCheck
	type = All
	title = Take @/mentor and @/trainee out in a craft which contains retractable landing legs.
	hideChildren = true
			PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/mentor	
			kerbal = @/trainee
		}
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleWheelDeployment
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @/simLevel == 2
		}
	}

		PARAMETER
	{
	name = LegCheck
	type = All
	title = Take @/mentor and @/trainee out in a craft which contains wheels.
	hideChildren = true
			PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/mentor	
			kerbal = @/trainee
		}
		PARAMETER
		{
			name = PartValidation
			type = PartValidation
			partModule = ModuleWheelMotor
		}
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = @/simLevel == 3
		}
	}
	
	PARAMETER
	{
		name = EVASim
		type = All
		completeInSequence = true
		hideChildren = true
		title = Take @/trainee on EVA to perform the simulation.
		
		PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = EVA
		}

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/trainee
		}
	}

	PARAMETER
	{
		name = Duration
		type = Duration
		duration = @/simTime
		preWaitText = Waiting for simulation parameters to be fulfilled.
		waitingText = Running Simulation
		completionText = Simulation Complete
		startCriteria = PARAMETER_COMPLETION
		parameter = EVASim
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/mentor.RosterStatus() == Available && @/trainee.RosterStatus() == Available && @/trainee.ExperienceLevel()<@/minExperience)
		title = Both mentor and trainee must be available in the roster.
	}
}

	
		
		

		