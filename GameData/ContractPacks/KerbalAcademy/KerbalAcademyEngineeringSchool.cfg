    CONTRACT_TYPE
    {
        name = KerbalAcademyEngineeringSchool
        title = Kerbal Academy: Engineering School
		group = KerbalAcademy
        description = @/newLevel <4 ? @/repairString : @/tourString
		genericDescription = Take an Engineer through the Advanced Program.
        synopsis = Complete the training course with @/trainee.
        completedMessage = Congratulations, @/trainee is feeling more experienced already.
		notes = @/newLevel <4 ? "This is just a simulation. The malfunctioning part will appear to be working." : 
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = @/homeworld
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = -100000

		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Engineer && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel()>0 && m.ExperienceLevel()<5).Random()
			title = Must have an engineer available in the roster.
		}

		DATA
		{
			type = CelestialBody
			homeworld = HomeWorld()
			hidden = true
		}

		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			aliveKerbals = AllKerbals().Where(a => a.RosterStatus() == Available || a.RosterStatus() == Assigned)
			mentorList = @aliveKerbals.Where(m => m.ExperienceTrait() == Engineer && m.Type() == Crew && m.ExperienceLevel() > @/mentorLevel)
			hidden = true
		}

		DATA
		{
			type = double
			newLevel = @/trainee.ExperienceLevel()+1
			expAward = @newLevel == 5 ? 32 : @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			mentorLevel = @/trainee.ExperienceLevel()+1
			hidden = true
		}

		DATA
		{
		type = string
		requiredValue = false
		broken = @/newLevel == 2 ? "landing legs" : "wheels"
		repairString = "@/trainee is ready to improve their skills. Help them repair the @/broken on @/craft and they will advance a level."
		tourString = "@/trainee is ready to improve their skills. Give them a tour on board @/craft and they will advance a level."
		hidden = true
		}

		DATA
		{
			type = List<Vessel>
			requiredValue = false
			l2Craft = AllVessels().Where(v => v.VesselType() == Lander)
			l3Craft = AllVessels().Where(v => v.VesselType() == Rover)
			l4Craft = AllVessels().Where(v => v.VesselType() == Station)
			l5Craft = AllVessels().Where(v => v.VesselType() == Base && v.CelestialBody() != @/homeworld)
			hidden = true
		}

		DATA
		{
			type = Vessel
			craft = @/newLevel == 5 ? @/l5Craft.Random() : @/newLevel == 4 ? @/l4Craft.Random() : @/newLevel == 3 ? @/l3Craft.Random() : @/l2Craft.Random()
			title = Must have a craft that meets the training course's requirements.
		}

				DATA
		{
			type = Location
			VesselLocation = @/craft.Location()
			hidden = true
		}

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}

	PARAMETER
	{
		name = FirstCheck
		type = All
		title = Bring @/trainee to @/craft
		hideChildren = true
			
			PARAMETER
			{
				name = Rendezvous
				type = Rendezvous
				vessel = @/craft
			}
	
			PARAMETER
			{	
				name = HasCrew
				type = HasCrew
				kerbal = @/trainee
			}
	}

	PARAMETER
	{
		name = Repair
		type = All
		hideChildren = true
		completeInSequence = true
		title = Go on EVA to repair the @/broken
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/trainee
		}

				PARAMETER
		{
			name = VesselIsType
			type = VesselIsType
			vesselType = EVA
		}

		REQUIREMENT
		{
		name = Expression
		type = Expression
		expression = (@/newLevel <4)
		}
	}

		PARAMETER
	{
		name = Tour
		type = VesselParameterGroup
		vessel = @/craft
		hideChildren = true
		completeInSequence = true
		title = Do a 30 day tour on @/craft
		
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			kerbal = @/trainee
		}

		REQUIREMENT
		{
		name = Expression
		type = Expression
		expression = (@/newLevel >3)
		}
	}

	PARAMETER
	{
		name = RepairTimer
		type = Duration
		duration = 2m
		preWaitText = Repair Pending
		waitingText = Repair in Progress
		completionText = Repair Complete
		startCriteria = PARAMETER_COMPLETION
		parameter = Repair
		
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = (@/newLevel <4)
		}
	}

		PARAMETER
	{
		name = TourTimer
		type = Duration
		duration = 30d
		preWaitText = Waiting for tour to start
		waitingText = Doing tour of @/craft
		completionText = Tour finished!
		startCriteria = PARAMETER_COMPLETION
		parameter = Tour
		
		REQUIREMENT
		{
			name = Expression
			type = Expression
			expression = (@/newLevel >3)
		}
	}
	

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/trainee.RosterStatus() == Available && @/mentorList.Count() == 0 && @/trainee.ExperienceLevel() < @/newLevel)
		title = Must qualify for the Advanced Program (if this fails, but a valid trainee is found, the Kerbal is eligible for Engineering 101)
	}
}

	
		
		

		