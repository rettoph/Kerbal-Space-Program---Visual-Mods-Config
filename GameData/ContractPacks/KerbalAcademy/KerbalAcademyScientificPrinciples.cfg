    CONTRACT_TYPE
    {
        name = KerbalAcademyScientificPrinciples
        title = Kerbal Academy: Scientific Principles
		group = KerbalAcademy
        description = Looks like @/trainee could do with brushing up on their scientific knowledge. Good job @/mentor is on hand to help.
		genericDescription = One of our scientists could do with brushing up on their scientific knowledge. Good job we have a mentor to help.
        synopsis = Let @/trainee collect @/experiment while being tutored by @/mentor
        completedMessage = Perfect. @/trainee can feel the benefit of @/mentor and their experience already.
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
        cancellable = true
		maxSimultaneous = 1
        declinable = true
        prestige = Significant
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost
		
		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			mentor = AllKerbals().Where(m => m.ExperienceTrait() == Scientist && m.ExperienceLevel()>=2 && m.Type() == Crew && m.RosterStatus() == Available).Random()
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Scientist && m.ExperienceLevel()<= @/minExperience && m.Type() == Crew && m.RosterStatus() == Available).Random()
			title = Must have a Scientist who qualifies for the Basic Program. Must have a mentor who is at least two levels more advanced.
		}

		DATA
		{
			type = int
			levelGain = @/mentor.ExperienceLevel() - @/trainee.ExperienceLevel()-1
			newLevel = Random(1, @/mentor.ExperienceLevel()-1)
			hidden = true
		}
	
		DATA
		{
			type = double
			rewardMultiplier = Random(@/newLevel, @/levelGain)
			trainingCost = @/rewardMultiplier*-100000
			expAward = @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			minExperience = @/mentor.ExperienceLevel()-2
			hidden = true
		}

		DATA
		{
			type = CelestialBody
			home = HomeWorld()
			orbited = OrbitedBodies().Random()
			hidden = true
		}

				DATA
		{
			type = List<Biome>
			requiredValue = false
			KSC = KSCBiomes().ExcludeAll(MainKSCBiomes())
			homeBiomes = @/home.Biomes().Where(r => r.RemainingScience() >= Science())
			orbitedBiomes = @/orbited.Biomes().Where(r => r.RemainingScience() >= Science())
			validhomeBiomes = @/homeBiomes.ExcludeAll(@KSC)
			validorbitBiomes = @/orbitedBiomes.ExcludeAll(@KSC)
			invalidorbitBiomes = @/orbited.Biomes()
			hidden = true
		}

			DATA
		{ 
			type = Biome
			requiredValue = false
			homeBiome = @/validhomeBiomes.Random()
			orbitBiome = @/validorbitBiomes.Random()
			invalidBiome = @/invalidorbitBiomes.Random()
			hidden = true
		}
		DATA
		{
			type = List<ScienceSubject>
			requiredValue = false
			orbitExperiment = AllScienceSubjectsByBiome([@orbitBiome]).Where(s => s.RemainingScience()>0 && s.RemainingScience()<=Science())
			homeExperiment = AllScienceSubjectsByBiome([@homeBiome]).Where(s => s.RemainingScience()>0 && s.RemainingScience()<=Science())
			invalidExperiment = AllScienceSubjectsByBiome([@invalidBiome])
			hidden = true
		}

		DATA
		{
			type = ScienceSubject
			uniquenessCheck = GROUP_ACTIVE
			experiment = @/homeExperiment.Count()>0 ? @/homeExperiment.Random() : @/orbitExperiment.Count() >0 ? @/orbitExperiment.Random() : @/invalidExperiment.Random()
			title = Must have a valid experiment for the trainee to perform (this should never fail)
		}
		

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}

	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		kerbal = @/mentor	
		kerbal = @/trainee
	}

	PARAMETER
	{
		name = CollectScience
		type = CollectScience
		subject = @/experiment
		recoveryMethod = None
	}	

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/mentor.RosterStatus() == Available && @/trainee.RosterStatus() == Available && @/trainee.ExperienceLevel()<= @/minExperience && @/trainee.ExperienceLevel() < @/newLevel)
		title = Both mentor and trainee must be available in the Roster.
	}
}

	
		
		

		