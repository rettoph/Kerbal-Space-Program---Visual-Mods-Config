    CONTRACT_TYPE
    {
        name = KerbalAcademyFieldScience
        title = Kerbal Academy: Field Science
		group = KerbalAcademy
        description = It seems that @/trainee is ready to improve their scientific knowledge. Complete the mission and they will advance a level.
		genericDescription = One of our scientists is ready to improve their scientific knowledge. Complete the mission and they will advance a level.
        synopsis = Complete the training course with @/trainee.
        completedMessage = Congratulations, @/trainee is feeling more experienced already.
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
        cancellable = true
		maxSimultaneous = 1
        declinable = true
        prestige = Significant
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = -100000

		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == Scientist && m.Type() == Crew && m.RosterStatus() == Available && m.ExperienceLevel()>0 && m.ExperienceLevel()<5).Random()
			title = Must have a scientist who is level 1 or higher.
		}

		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			aliveKerbals = AllKerbals().Where(a => a.RosterStatus() == Available || a.RosterStatus() == Assigned)
			mentorList = @aliveKerbals.Where(m => m.ExperienceTrait() == Scientist && m.Type() == Crew && m.ExperienceLevel() > @/mentorLevel)
		}

		DATA
		{
			type = double
			newLevel = @/trainee.ExperienceLevel()+1
			expAward = @newLevel == 5 ? 32 : @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			mentorLevel = @/trainee.ExperienceLevel()+1
		}
			
		DATA
		{
			type = List<CelestialBody>
			requiredValue = false
			notKerbin = AllBodies().Where(b=> b.IsHomeWorld())
			notMoon = HomeWorld().Children()
			l5Body1 = OrbitedBodies().ExcludeAll(@notKerbin)
			l5BodyList = @/l5Body1.ExcludeAll(@notMoon)
		}

				DATA
		{
			type = CelestialBody
			requiredValue = false
			orbited = OrbitedBodies().Where(b => !b.IsHomeWorld()).Random()
			landed = LandedBodies().Where(b => !b.IsHomeWorld()).Random()
			l5Bodies = @/l5BodyList.Random()
		}

		DATA
		{
			type = List<Biome>
			requiredValue = false
			KSC = KSCBiomes().ExcludeAll(MainKSCBiomes())
			HomeBiomeList = HomeWorld().Biomes().Where(r => r.RemainingScience() >= Science())
			L2BiomeList = @/HomeBiomeList.ExcludeAll(@KSC)
			L3BiomeList = @/orbited.Biomes().Where(r => r.RemainingScience() >= Science())
			L4BiomeList = @/landed.Biomes().Where(r => r.RemainingScience() >= Science())
			L5BiomeList = @/l5Bodies.Biomes().Where(r => r.RemainingScience() >= Science())
		}

		DATA
		{ 
			type = Biome
			biome = @/newLevel == 5 ? @/L5BiomeList.Random() : @/newLevel == 4 ? @/L4BiomeList.Random() : @/newLevel == 3 ? @/L3BiomeList.Random() : @/L2BiomeList.Random()
			hidden = true
		}
		
		DATA
		{
			type = ScienceSubject
			experiment = AllScienceSubjectsByBiome([@biome]).Where(e => e.RemainingScience() >0).Random()
			title = Must have an experiment available which meets the training courses requirements.
		}

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}

	
	PARAMETER
	{	
		name = HasCrew
		type = HasCrew
		kerbal = @/trainee
	}

		PARAMETER
	{
		name = CollectScience
		type = CollectScience
		subject = @/experiment
		recoveryMethod = None
	}	
	
	

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/mentorList.Count() == 0 && @/trainee.RosterStatus() == Available && @/trainee.ExperienceLevel() < @/newLevel)
		title = Scientist must be eligible for the Advanced Program (if this fails, but a valid trainee is found, they are eligible for Scientific Principles)
	}
}

	
		
		

		